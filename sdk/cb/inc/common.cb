#asm
    include "/sdk/asm/inc/basic_stub.inc"
main:
    jp      _main
#endasm

ioport IO_VCTRL    = 0xE0;
ioport IO_VSCRX_L  = 0xE1;
ioport IO_VSCRX_H  = 0xE2;
ioport IO_VSCRY    = 0xE3;
ioport IO_VSPRSEL  = 0xE4;
ioport IO_VSPRX_L  = 0xE5;
ioport IO_VSPRX_H  = 0xE6;
ioport IO_VSPRY    = 0xE7;
ioport IO_VSPRIDX  = 0xE8;
ioport IO_VSPRATTR = 0xE9;
ioport IO_VPALSEL  = 0xEA;
ioport IO_VPALDATA = 0xEB;
ioport IO_VLINE    = 0xEC;
ioport IO_PCMDAC   = 0xEC;
ioport IO_VIRQLINE = 0xED;
ioport IO_IRQMASK  = 0xEE;
ioport IO_IRQSTAT  = 0xEF;
ioport IO_BANK0    = 0xF0;
ioport IO_BANK1    = 0xF1;
ioport IO_BANK2    = 0xF2;
ioport IO_BANK3    = 0xF3;
ioport IO_ESPCTRL  = 0xF4;
ioport IO_ESPDATA  = 0xF5;
ioport IO_PSG1DATA = 0xF6;
ioport IO_PSG1ADDR = 0xF7;
ioport IO_PSG2DATA = 0xF8;
ioport IO_PSG2ADDR = 0xF9;
ioport IO_KEYBUF   = 0xFA;
ioport IO_SYSCTRL  = 0xFB;
ioport IO_CASSETTE = 0xFC;
ioport IO_CPM      = 0xFD;
ioport IO_VSYNC    = 0xFD;
ioport IO_PRINTER  = 0xFE;
ioport IO_SCRAMBLE = 0xFF;
ioport IO_KEYBOARD = 0xFF;

ioport IO_KEYBOARD_ALL  = 0x00FF;
ioport IO_KEYBOARD_COL7 = 0x7FFF;
ioport IO_KEYBOARD_COL6 = 0xBFFF;
ioport IO_KEYBOARD_COL5 = 0xDFFF;
ioport IO_KEYBOARD_COL4 = 0xEFFF;
ioport IO_KEYBOARD_COL3 = 0xF7FF;
ioport IO_KEYBOARD_COL2 = 0xFBFF;
ioport IO_KEYBOARD_COL1 = 0xFDFF;
ioport IO_KEYBOARD_COL0 = 0xFEFF;

const char VCTRL_TEXT_EN   = (1 << 0);
const char VCTRL_MODE_TILE = (1 << 1);
const char VCTRL_SPR_EN    = (1 << 3);


// Aquarius keyboard scancodes
const char KEY_EQUALS    = 0;  // = +
const char KEY_BACKSPACE = 1;  // BS Backslash
const char KEY_COLON     = 2;  // : *
const char KEY_RETURN    = 3;  // Return
const char KEY_SEMICOLON = 4;  // ; @
const char KEY_PERIOD    = 5;  // . >
const char KEY_INSERT    = 6;  // Insert
const char KEY_DELETE    = 7;  // Delete
const char KEY_MINUS     = 8;  // - _
const char KEY_SLASH     = 9;  // / ^
const char KEY_0         = 10; // 0 ?
const char KEY_P         = 11; // P
const char KEY_L         = 12; // L
const char KEY_COMMA     = 13; // ; <
const char KEY_UP        = 14; // Cursor up
const char KEY_RIGHT     = 15; // Cursor right
const char KEY_9         = 16; // 9 )
const char KEY_O         = 17; // O
const char KEY_K         = 18; // K
const char KEY_M         = 19; // M
const char KEY_N         = 20; // N
const char KEY_J         = 21; // J
const char KEY_LEFT      = 22; // Cursor left
const char KEY_DOWN      = 23; // Cursor down
const char KEY_8         = 24; // 8 (
const char KEY_I         = 25; // I
const char KEY_7         = 26; // 7 '
const char KEY_U         = 27; // U
const char KEY_H         = 28; // H
const char KEY_B         = 29; // B
const char KEY_HOME      = 30; // Home
const char KEY_END       = 31; // End
const char KEY_6         = 32; // 6 &
const char KEY_Y         = 33; // Y
const char KEY_G         = 34; // G
const char KEY_V         = 35; // V
const char KEY_C         = 36; // C
const char KEY_F         = 37; // F
const char KEY_PGUP      = 38; // Page Up
const char KEY_PGDN      = 39; // Page Down
const char KEY_5         = 40; // 5 %
const char KEY_T         = 41; // T
const char KEY_4         = 42; // 4 $
const char KEY_R         = 43; // R
const char KEY_D         = 44; // D
const char KEY_X         = 45; // X
const char KEY_PAUSE     = 46; // Pause/break
const char KEY_PRTSCR    = 47; // PrtScr/SysRq
const char KEY_3         = 48; // 3 #
const char KEY_E         = 49; // E
const char KEY_S         = 50; // S
const char KEY_Z         = 51; // Z
const char KEY_SPACE     = 52; // Space
const char KEY_A         = 53; // A
const char KEY_MENU      = 54; // Menu key
const char KEY_TAB       = 55; // Tab
const char KEY_2         = 56; // 2 "
const char KEY_W         = 57; // W
const char KEY_1         = 58; // 1 !
const char KEY_Q         = 59; // Q
const char KEY_SHIFT     = 60; // Shift
const char KEY_CTRL      = 61; // Ctrl
const char KEY_ALT       = 62; // Alt
const char KEY_GUI       = 63; // Gui

