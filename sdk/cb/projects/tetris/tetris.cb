#include "/sdk/cb/inc/common.cb"

// Playfield dimensions
const int PLAYFIELD_W  = 10;
const int PLAYFIELD_H  = 20;
const int PLAYFIELD_YT = 2;
const int PLAYFIELD_YB = (PLAYFIELD_YT + PLAYFIELD_H - 1);
const int PLAYFIELD_XL = 11;
const int PLAYFIELD_XR = (PLAYFIELD_XL + PLAYFIELD_W - 1);

const int MARKER_TILE      = 1;
const int DELAY_LEFT_RIGHT = 5;
const int DELAY_DOWN       = 3;

// Tetrominoes enum
const int TM_I     = 0;
const int TM_J     = 1;
const int TM_L     = 2;
const int TM_O     = 3;
const int TM_S     = 4;
const int TM_T     = 5;
const int TM_Z     = 6;
const int TM_TOTAL = 7;

// Tile data
extern char tile_palette[];
extern char tile_data[];
extern char tile_data_end[];

// VRAM pointers
const int  *vram_tilemap  = 0xC000;
const char *vram_tiledata = 0xE000;

// Game statistics
int  score;
char level;
int  lines;
char gameover;
char quit;

// Background animation variables
char *bgtiles_dst;
char *bgtiles_src;
char *bgtiles_src2;
char  bgtiles_idx = 0;
char  bgdelay     = 0;

// Current tetromino variables
char cur_tetromino;
char cur_rot;
char cur_posx;
char cur_posy;

// Current background tile
char bg_tile = 13;

// Pressed keys array
char pressed_keys[8];

// Next tetromino (shown in preview area)
char next_tetromino;

// Random selection for next tetromino
char tetromino_random = 0;

// Temporary string variables for drawing stats
char tmpstr[16];
char tmpstr2[16];

// Level speed curve (number of frames delay per gravity drop)
char speed_curve[21] = {
    52, 48, 44, 40, 36, 32, 27, 21, 16, 10,
    9, 8, 7, 6, 5, 5, 4, 4, 3, 3, 2};

// clang-format off
int gameover_playfield[20 * 10] = {
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
    0x09, 0x4A, 0x4B, 0x4C, 0x4C, 0x4C, 0x4C, 0x24B, 0x24A, 0x09,
    0x09, 0x6A, 0x6B, 0x6C, 0x6C, 0x6C, 0x6C, 0x26B, 0x26A, 0x09,
    0x09, 0x6D, 0x6E, 0x0F + 'G', 0x0F + 'A', 0x0F + 'M', 0x0F + 'E', 0x26E, 0x26D, 0x09,
    0x09, 0x6D, 0x6E, 0x01, 0x01, 0x01, 0x01, 0x26E, 0x26D, 0x09,
    0x09, 0x6D, 0x6E, 0x0F + 'O', 0x0F + 'V', 0x0F + 'E', 0x0F + 'R', 0x26E, 0x26D, 0x09,
    0x09, 0x46A, 0x46B, 0x46C, 0x46C, 0x46C, 0x46C, 0x66B, 0x66A, 0x09,
    0x09, 0x44A, 0x44B, 0x44C, 0x44C, 0x44C, 0x44C, 0x64B, 0x64A, 0x09,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x0F + 'P', 0x0F + 'L', 0x0F + 'E', 0x0F + 'A', 0x0F + 'S', 0x0F + 'E', 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x0F + 'T', 0x0F + 'R', 0x0F + 'Y', 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x0F + 'A', 0x0F + 'G', 0x0F + 'A', 0x0F + 'I', 0x0F + 'N', 0x4F, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
};
// clang-format on

// Keyboard bitmap
const int KBM_LEFT       = (1 << 0);
const int KBM_RIGHT      = (1 << 1);
const int KBM_UP         = (1 << 2);
const int KBM_DOWN       = (1 << 3);
const int KBM_ROTATE_CCW = (1 << 4);
const int KBM_ROTATE_CW  = (1 << 5);

char kb_pressing_prev[8];
char kb_pressing_keys[8];

// clang-format off
// Tetromino I shape in 4 rotations
char tetromino_i[4 * 16] = {
    // Rotation 0
     0,  0,  0,  0,
    16, 17, 17, 18,
     0,  0,  0,  0,
     0,  0,  0,  0,
    // Rotation 1
     0,  0, 19,  0,
     0,  0, 20,  0,
     0,  0, 20,  0,
     0,  0, 21,  0,
    // Rotation 2
     0,  0,  0,  0,
     0,  0,  0,  0,
    16, 17, 17, 18,
     0,  0,  0,  0,
    // Rotation 3
     0, 19,  0,  0,
     0, 20,  0,  0,
     0, 20,  0,  0,
     0, 21,  0,  0,
};

// Tetromino J shape in 4 rotations
char tetromino_j[4 * 9] = {
    // Rotation 0
    25,  0,  0,
    25, 25, 25,
     0,  0,  0,
    // Rotation 1
     0, 25, 25,
     0, 25,  0,
     0, 25,  0,
    // Rotation 2
     0,  0,  0,
    25, 25, 25,
     0,  0, 25,
    // Rotation 3
     0, 25,  0,
     0, 25,  0,
    25, 25,  0,
};

// Tetromino L shape in 4 rotations
char tetromino_l[4 * 9] = {
    // Rotation 0
     0,  0, 26,
    26, 26, 26,
     0,  0,  0,
    // Rotation 1
     0, 26,  0,
     0, 26,  0,
     0, 26, 26,
    // Rotation 2
     0,  0,  0,
    26, 26, 26,
    26,  0,  0,
    // Rotation 3
    26, 26,  0,
     0, 26,  0,
     0, 26,  0,
};

// Tetromino O shape (just 1 rotation)
char tetromino_o[4] = {
    27, 27,
    27, 27,
};

// Tetromino S shape in 4 rotations
char tetromino_s[4 * 9] = {
    // Rotation 0
     0, 24, 24,
    24, 24,  0,
     0,  0,  0,
    // Rotation 1
     0, 24,  0,
     0, 24, 24,
     0,  0, 24,
    // Rotation 2
     0,  0,  0,
     0, 24, 24,
    24, 24,  0,
    // Rotation 3
    24,  0,  0,
    24, 24,  0,
     0, 24,  0,
};

// Tetromino T shape in 4 rotations
char tetromino_t[4 * 9] = {
    // Rotation 0
     0, 22,  0,
    22, 22, 22,
     0,  0,  0,
    // Rotation 1
     0, 22,  0,
     0, 22, 22,
     0, 22,  0,
    // Rotation 2
     0,  0,  0,
    22, 22, 22,
     0, 22,  0,
    // Rotation 3
     0, 22,  0,
    22, 22,  0,
     0, 22,  0,
};

// Tetromino Z shape in 4 rotations
char tetromino_z[4 * 9] = {
    // Rotation 0
    23, 23,  0,
     0, 23, 23,
     0,  0,  0,
    // Rotation 1
     0,  0, 23,
     0, 23, 23,
     0, 23,  0,
    // Rotation 2
     0,  0,  0,
    23, 23,  0,
     0, 23, 23,
    // Rotation 3
     0, 23,  0,
    23, 23,  0,
    23,  0,  0,
};

// Offsets used for rotation
int wall_kick_offsets_jlstz_x[8 * 5] = {
    0, +1, +1, 0, +1, // CCW:0->L
    0, -1, -1, 0, -1, // CW :0->R
    0, +1, +1, 0, +1, // CCW:R->0
    0, +1, +1, 0, +1, // CW :R->2
    0, -1, -1, 0, -1, // CCW:2->R
    0, +1, +1, 0, +1, // CW :2->L
    0, -1, -1, 0, -1, // CCW:L->2
    0, -1, -1, 0, -1, // CW :L->0
};
int wall_kick_offsets_jlstz_y[8 * 5] = {
    0, 0, +1, -2, -2, // CCW:0->L
    0, 0, +1, -2, -2, // CW :0->R
    0, 0, -1, +2, +2, // CCW:R->0
    0, 0, -1, +2, +2, // CW :R->2
    0, 0, +1, -2, -2, // CCW:2->R
    0, 0, +1, -2, -2, // CW :2->L
    0, 0, -1, +2, +2, // CCW:L->2
    0, 0, -1, +2, +2, // CW :L->0
};

// Offsets used for rotation
int wall_kick_offsets_i_x[8 * 5] = {
    0, -1, +2, -1, +2, // CCW:0->L
    0, -2, +1, -2, +1, // CW :0->R
    0, +2, -1, +2, -1, // CCW:R->0
    0, -1, +2, -1, +2, // CW :R->2
    0, +1, -2, +1, -2, // CCW:2->R
    0, +2, -1, +2, -1, // CW :2->L
    0, -2, +1, -2, +1, // CCW:L->2
    0, +1, -2, +1, -2, // CW :L->0
};
int wall_kick_offsets_i_y[8 * 5] = {
    0, 0, 0, +2, -1, // CCW:0->L
    0, 0, 0, -1, +2, // CW :0->R
    0, 0, 0, +1, -2, // CCW:R->0
    0, 0, 0, +2, -1, // CW :R->2
    0, 0, 0, -2, +1, // CCW:2->R
    0, 0, 0, +1, -2, // CW :2->L
    0, 0, 0, -1, +2, // CCW:L->2
    0, 0, 0, -2, +1, // CW :L->0
};

// clang-format on

kb_scan() {
    char i;
    for (i = 0; i < 8; i = i + 1)
        kb_pressing_prev[i] = kb_pressing_keys[i];

    kb_pressing_keys[0] = ~IO_KEYBOARD_COL0;
    kb_pressing_keys[1] = ~IO_KEYBOARD_COL1;
    kb_pressing_keys[2] = ~IO_KEYBOARD_COL2;
    kb_pressing_keys[3] = ~IO_KEYBOARD_COL3;
    kb_pressing_keys[4] = ~IO_KEYBOARD_COL4;
    kb_pressing_keys[5] = ~IO_KEYBOARD_COL5;
    kb_pressing_keys[6] = ~IO_KEYBOARD_COL6;
    kb_pressing_keys[7] = ~IO_KEYBOARD_COL7;
}

kb_pressing(char scancode) {
    return (kb_pressing_keys[scancode / 8] & (1 << (scancode & 7))) != 0;
}

kb_pressed(char scancode) {
    return ((~kb_pressing_prev[scancode / 8] & kb_pressing_keys[scancode / 8]) & (1 << (scancode & 7))) != 0;
}

video_wait_line(char linenr) {
    IO_VIRQLINE = linenr;
    IO_IRQSTAT  = 2;
    while ((IO_IRQSTAT & 2) == 0) {
    }
}

// Set tile 'tile_idx' at position i,j
set_tile(char i, char j, char tile_idx) {
    vram_tilemap[(j << 6) | i] = 0x1100 | tile_idx;
}

set_tile2(char i, char j, int val) {
    vram_tilemap[(j << 6) | i] = 0x1100 | val;
}

// Get tile at position i,j
get_tile(char i, char j) {
    if (j < PLAYFIELD_YT && (i >= PLAYFIELD_XL && i <= PLAYFIELD_XR))
        return bg_tile;

    return vram_tilemap[(j << 6) | i] & 0xFF;
}

// This function will draw the given tetromino at coordinate i,j. If check
// is set, instead of drawing the function will return if the tetromino
// can be drawn without intersecting with existing blocks
// (returns 0 on collision).
draw_tetromino(char i, char j, char tetromino, char rot, char check, char lock) {
    rot      = rot & 3;
    char *p  = 0;
    char  sz = 0;
    char  y;
    char  x;

    if (tetromino == TM_O) {
        sz = 2;
        p  = tetromino_o;
    } else if (tetromino == TM_J) {
        sz = 3;
        p  = tetromino_j + 9 * rot;
    } else if (tetromino == TM_L) {
        sz = 3;
        p  = tetromino_l + 9 * rot;
    } else if (tetromino == TM_S) {
        sz = 3;
        p  = tetromino_s + 9 * rot;
    } else if (tetromino == TM_T) {
        sz = 3;
        p  = tetromino_t + 9 * rot;
    } else if (tetromino == TM_Z) {
        sz = 3;
        p  = tetromino_z + 9 * rot;
    } else if (tetromino == TM_I) {
        sz = 4;
        p  = tetromino_i + 16 * rot;
    }

    if (sz == 3 || sz == 4) {
        i = i - 1;
        j = j - 1;
    }

    if (check) {
        for (y = 0; y < sz; y = y + 1) {
            for (x = 0; x < sz; x = x + 1) {
                char val = *p;
                p        = p + 1;
                if (val && get_tile(i + x, j + y) != bg_tile)
                    return 0;
            }
        }
        return 1;

    } else {
        for (y = 0; y < sz; y = y + 1) {
            for (x = 0; x < sz; x = x + 1) {
                char val = *p;
                p        = p + 1;
                if (val) {
                    char jy = j + y;
                    if (jy < PLAYFIELD_YT) {
                        return 0;
                    }
                    if (lock)
                        val = MARKER_TILE;
                    set_tile(i + x, jy, val);
                }
            }
        }
        return 1;
    }
}

// Update sprites used to display moving tetromino
set_tetromino_sprites(char x, char y, char tetromino, char rot) {
    rot      = rot & 3;
    char *p  = 0;
    char  sz = 0;

    if (tetromino == TM_O) {
        sz = 2;
        p  = tetromino_o;
    } else if (tetromino == TM_J) {
        sz = 3;
        p  = tetromino_j + 9 * rot;
    } else if (tetromino == TM_L) {
        sz = 3;
        p  = tetromino_l + 9 * rot;
    } else if (tetromino == TM_S) {
        sz = 3;
        p  = tetromino_s + 9 * rot;
    } else if (tetromino == TM_T) {
        sz = 3;
        p  = tetromino_t + 9 * rot;
    } else if (tetromino == TM_Z) {
        sz = 3;
        p  = tetromino_z + 9 * rot;
    } else if (tetromino == TM_I) {
        sz = 4;
        p  = tetromino_i + 16 * rot;
    }
    if (sz == 3 || sz == 4) {
        x = x - 8;
        y = y - 8;
    }

    IO_VSPRSEL = 0;

    char j;
    char i;
    char val;
    int  sx;

    for (j = 0; j < sz; j = j + 1) {
        for (i = 0; i < sz; i = i + 1) {
            val = *p;
            p   = p + 1;
            if (val) {
                sx          = x + (i << 3);
                IO_VSPRX_L  = sx & 0xFF;
                IO_VSPRX_H  = sx >> 8;
                IO_VSPRY    = y + (j << 3);
                IO_VSPRIDX  = val;
                IO_VSPRATTR = 0x91;
                IO_VSPRSEL  = IO_VSPRSEL + 1;
            }
        }
    }
}

// Draw string 'str' at i,j
draw_text(char i, char j, char *str) {
    while (*str) {
        char val = *str;
        str      = str + 1;
        char idx = 1;

        if (val >= '0' && val <= '9') {
            idx = 64 + (val - '0');
        } else if (val >= 'A' && val <= 'Z') {
            idx = 80 + (val - 'A');
        } else if (val >= 'a' && val <= 'z') {
            idx = 80 + (val - 'a');
        }
        set_tile(i, j, idx);
        i = i + 1;
    }
}

// Draw static part of screen. Only drawn at start
draw_static_screen() {
    char i;
    char j;

    // Draw playfield borders
    for (j = 0; j < PLAYFIELD_H; j = j + 1) {
        set_tile(PLAYFIELD_XL - 1, j + PLAYFIELD_YT, 32);
        set_tile(PLAYFIELD_XR + 1, j + PLAYFIELD_YT, 32);
    }
    for (i = 0; i < PLAYFIELD_W + 2; i = i + 1) {
        set_tile(i + PLAYFIELD_W, PLAYFIELD_YB + 1, 33);
    }

    // Draw playfield content
    for (j = 0; j < PLAYFIELD_H; j = j + 1) {
        for (i = 0; i < PLAYFIELD_W; i = i + 1) {
            set_tile(i + PLAYFIELD_XL, j + PLAYFIELD_YT, bg_tile);
        }
    }

    // Draw tetromino preview borders
    set_tile(26, 4, 33);
    set_tile(27, 4, 34);
    set_tile(28, 4, 35);
    set_tile(29, 4, 35);
    set_tile(30, 4, 36);
    set_tile(31, 4, 33);

    set_tile(26, 5, 40);
    set_tile(26, 6, 41);
    set_tile(26, 7, 41);
    set_tile(26, 8, 42);

    set_tile(31, 5, 43);
    set_tile(31, 6, 44);
    set_tile(31, 7, 44);
    set_tile(31, 8, 45);

    set_tile(26, 9, 33);
    set_tile(27, 9, 37);
    set_tile(28, 9, 38);
    set_tile(29, 9, 38);
    set_tile(30, 9, 39);
    set_tile(31, 9, 33);

    // Draw texts
    draw_text(24, 2, " MARATHON ");
    draw_text(25, 11, "  SCORE ");
    draw_text(25, 14, "  LEVEL ");
    draw_text(25, 17, "  LINES ");
}

// Draw score/level/lines stats
int  old_score = 0xFFFF;
char old_level = 0xFF;
int  old_lines = 0xFFFF;

draw_stats() {
    tmpstr[0] = ' ';
    tmpstr[1] = ' ';
    tmpstr[7] = ' ';
    tmpstr[8] = 0;

    if (old_score != score) {
        old_score = score;
        itoa(tmpstr + 2, score);
        tmpstr[7] = ' ';
        draw_text(25, 12, tmpstr);
    }

    if (old_level != level) {
        old_level = level;
        itoa(tmpstr + 2, level);
        tmpstr[7] = ' ';
        draw_text(25, 15, tmpstr);
    }

    if (old_lines != lines) {
        old_lines = lines;
        itoa(tmpstr + 2, lines);
        tmpstr[7] = ' ';
        draw_text(25, 18, tmpstr);
    }
}

// Draw tetromino preview content
draw_preview() {
    // Draw tetromino preview content
    char j;
    char i;

    for (j = 0; j < 4; j = j + 1) {
        for (i = 0; i < 4; i = i + 1) {
            set_tile(i + 27, j + 5, 1);
        }
    }

    char x = 28;
    char y = 7;
    if (next_tetromino == TM_O) {
        y = 6;
    } else if (next_tetromino == TM_I) {
        x = 28;
        y = 6;
    }
    draw_tetromino(x, y, next_tetromino, 0, 0, 0);
}

get_joystick() {
    char old_addr = IO_PSG1ADDR;
    IO_PSG1ADDR   = 14;
    char joyval   = IO_PSG1DATA;
    IO_PSG1ADDR   = old_addr;
    return joyval;
}

// Compose keys bitmap with only the keys used by the game
getkeys() {
    char result = 0;
    if (kb_pressing(KEY_A) || kb_pressing(KEY_LEFT))
        result = result | KBM_LEFT;
    if (kb_pressing(KEY_D) || kb_pressing(KEY_RIGHT))
        result = result | KBM_RIGHT;
    if (kb_pressing(KEY_W) || kb_pressing(KEY_UP))
        result = result | KBM_UP;
    if (kb_pressing(KEY_S) || kb_pressing(KEY_DOWN))
        result = result | KBM_DOWN;
    if (kb_pressing(KEY_N) || kb_pressing(KEY_Z))
        result = result | KBM_ROTATE_CCW;
    if (kb_pressing(KEY_M) || kb_pressing(KEY_X))
        result = result | KBM_ROTATE_CW;

    char joyval = ~get_joystick();
    if (joyval & (1 << 0))
        result = result | KBM_DOWN;
    if (joyval & (1 << 1))
        result = result | KBM_RIGHT;
    if (joyval & (1 << 2))
        result = result | KBM_UP;
    if (joyval & (1 << 3))
        result = result | KBM_LEFT;
    if (joyval & (1 << 6))
        result = result | KBM_ROTATE_CW;
    if (joyval & (1 << 7))
        result = result | KBM_ROTATE_CCW;

    return result;
}

// Move tetromino left
move_left() {
    if (draw_tetromino(cur_posx - 1, cur_posy, cur_tetromino, cur_rot, 1, 0)) {
        cur_posx = cur_posx - 1;
    }
}

// Move tetromino right
move_right() {
    if (draw_tetromino(cur_posx + 1, cur_posy, cur_tetromino, cur_rot, 1, 0)) {
        cur_posx = cur_posx + 1;
    }
}

// Move tetromino down
move_down() {
    if (draw_tetromino(cur_posx, cur_posy + 1, cur_tetromino, cur_rot, 1, 0)) {
        cur_posy = cur_posy + 1;
        return 1;
    } else {
        return 0;
    }
}

// Rotate tetromino either clockwise (cw=true) or counter-clockwise (cw=false)
rotate(char cw) {
    char new_rot = cur_rot;
    if (cw)
        new_rot = (new_rot + 1) & 3;
    else
        new_rot = (new_rot - 1) & 3;

    char idx = (cur_rot << 1);
    if (cw)
        idx = idx | 1;

    int *wall_kick_offsets_x;
    int *wall_kick_offsets_y;
    int  offset = 5 * idx;
    if (cur_tetromino == TM_I) {
        wall_kick_offsets_x = wall_kick_offsets_i_x + offset;
        wall_kick_offsets_y = wall_kick_offsets_i_y + offset;
    } else {
        wall_kick_offsets_x = wall_kick_offsets_jlstz_x + offset;
        wall_kick_offsets_y = wall_kick_offsets_jlstz_y + offset;
    }
    char max_i = 4;
    if (cur_tetromino == TM_O)
        max_i = 0;

    char i;
    for (i = 0; i <= max_i; i = i + 1) {
        char new_posx = cur_posx + wall_kick_offsets_x[i];
        char new_posy = cur_posy + wall_kick_offsets_y[i];
        if (draw_tetromino(new_posx, new_posy, cur_tetromino, new_rot, 1, 0)) {
            cur_rot  = new_rot;
            cur_posx = new_posx;
            cur_posy = new_posy;
            break;
        }
    }
}

// Processing that needs to be done at the start of the frame
frame() {
    // IO_VPALSEL  = 0;
    // IO_VPALDATA = 0;

    // Wait for end of frame (line 216)
    video_wait_line(216);

    // IO_VPALSEL  = 0;
    // IO_VPALDATA = 0xFF;

    // Scan keys
    kb_scan();

    // Update screen during non-visible part
    if (bgdelay == 0) {
        // Animate background by updating 2 tile patterns
        memcpy(bgtiles_dst, bgtiles_src2, 64);
    }
    set_tetromino_sprites(cur_posx << 3, cur_posy << 3, cur_tetromino, cur_rot);

    // Animate background
    if (bgdelay == 0) {
        bgdelay = 2;

        if (bgtiles_idx == 7) {
            bgtiles_idx  = 0;
            bgtiles_src2 = bgtiles_src;
        } else {
            bgtiles_idx  = bgtiles_idx + 1;
            bgtiles_src2 = bgtiles_src2 + 64;
        }
    } else {
        bgdelay = bgdelay - 1;
    }
}

// Switch to next tetromino piece
next_piece() {
    cur_posx       = (PLAYFIELD_XL + PLAYFIELD_XR) / 2;
    cur_posy       = PLAYFIELD_YT - 1;
    cur_rot        = 0;
    cur_tetromino  = next_tetromino;
    next_tetromino = tetromino_random;
    draw_preview();
}

// Check if given line is full
check_line(char line) {
    char i;
    for (i = 0; i < PLAYFIELD_W; i = i + 1) {
        if (get_tile(i + PLAYFIELD_XL, line + PLAYFIELD_YT) == bg_tile)
            return 0;
    }
    return 1;
}

// Check for full lines
check_lines() {
    char lines_full = 0;
    int  j;
    int  i;

    for (j = 0; j < PLAYFIELD_H; j = j + 1) {
        if (check_line(j)) {
            for (i = 0; i < PLAYFIELD_W; i = i + 1) {
                set_tile(i + PLAYFIELD_XL, j + PLAYFIELD_YT, MARKER_TILE);
            }
            lines_full = lines_full + 1;
        }
    }
    if (lines_full == 0)
        return;

    // Small delay
    for (i = 0; i < 5; i = i + 1)
        frame();

    // Remove all marked lines
    int line = PLAYFIELD_H - 1;
    while (line >= 0) {
        if (get_tile(PLAYFIELD_XL, line + PLAYFIELD_YT) == MARKER_TILE) {
            // Remove line by copying all lines above it one line down
            j = line;
            while (j >= 0) {
                i = 0;
                while (i < PLAYFIELD_W) {
                    set_tile(PLAYFIELD_XL + i, PLAYFIELD_YT + j, get_tile(PLAYFIELD_XL + i, PLAYFIELD_YT + j - 1));
                    i = i + 1;
                }
                j = j - 1;
            }
            lines = lines + 1;
            if (lines % 10 == 0) {
                level = level + 1;
                if (level > 20)
                    level = 20;
            }
            frame();

        } else {
            line = line - 1;
        }
    }

    if (lines_full == 1)
        score = score + 40 * (level + 1);
    else if (lines_full == 2)
        score = score + 100 * (level + 1);
    else if (lines_full == 3)
        score = score + 300 * (level + 1);
    else if (lines_full == 4)
        score = score + 1200 * (level + 1);

    if (score > 30000)
        score = 30000;
    // if (score > 9999999)
    //     score = 9999999;
}

// Lock current tetromino in place and switch to the next one
lock_piece() {
    // Lock in place
    if (!draw_tetromino(cur_posx, cur_posy, cur_tetromino, cur_rot, 0, 1)) {
        gameover = 1;
    }

    // Hide sprites
    IO_VCTRL = IO_VCTRL & ~VCTRL_SPR_EN;

    // Small delay
    char i;
    for (i = 0; i < 5; i = i + 1)
        frame();
    draw_tetromino(cur_posx, cur_posy, cur_tetromino, cur_rot, 0, 0);

    // Switch to next piece
    next_piece();

    // Show sprites
    IO_VCTRL = IO_VCTRL | VCTRL_SPR_EN;

    // Check for full lines
    check_lines();
}

play_marathon() {
    char prev_keys = 0;

    score    = 0;
    level    = 0;
    lines    = 0;
    gameover = 0;

    char gravity_delay = speed_curve[level];
    char left_delay    = 0;
    char right_delay   = 0;
    char down_delay    = 0;

    cur_tetromino = tetromino_random;

    // Initial screen drawing
    draw_static_screen();
    draw_preview();

    // Switch video mode to tile mode
    IO_VCTRL = VCTRL_SPR_EN | VCTRL_MODE_TILE;
    next_piece();

    char wait_down_release = 0;

    while (!gameover) {
        frame();

        // Move tetromino down when gravity delay expires
        if (gravity_delay == 0) {
            gravity_delay = speed_curve[level];
            if (!move_down()) {
                lock_piece();
            }
        } else {
            gravity_delay = gravity_delay - 1;
        }

        // Update 'random' tetromino index
        tetromino_random = tetromino_random + 1;
        if (tetromino_random >= TM_TOTAL)
            tetromino_random = 0;

        // Handle keyboard interaction
        char keys    = getkeys();
        char newkeys = ~prev_keys & keys;

        if (keys & KBM_LEFT) {
            if (left_delay == 0) {
                left_delay = DELAY_LEFT_RIGHT;
                move_left();
            } else {
                left_delay = left_delay - 1;
            }
        } else {
            left_delay = 0;
        }
        if (keys & KBM_RIGHT) {
            if (right_delay == 0) {
                right_delay = DELAY_LEFT_RIGHT;
                move_right();
            } else {
                right_delay = right_delay - 1;
            }
        } else {
            right_delay = 0;
        }
        if (keys & KBM_DOWN) {
            if (!wait_down_release) {
                if (down_delay == 0) {
                    down_delay = 3;
                    if (move_down()) {
                        gravity_delay = speed_curve[level];
                        score         = score + 1;
                    } else {
                        lock_piece();
                        wait_down_release = 1;
                    }
                } else {
                    down_delay = down_delay - 1;
                }
            }
        } else {
            wait_down_release = 0;
            down_delay        = 0;
        }
        if (newkeys & KBM_ROTATE_CCW) {
            rotate(0);
        }
        if (newkeys & KBM_ROTATE_CW) {
            rotate(1);
        }

        draw_stats();

        // Keep track of keys pressed during this round
        prev_keys = keys;
    }

    // Disable sprites
    IO_VCTRL = VCTRL_MODE_TILE;

    // Animation

    // Draw playfield content
    int j;
    int i;
    for (j = PLAYFIELD_H - 1; j >= 0; j = j - 1) {
        for (i = 0; i < PLAYFIELD_W; i = i + 1)
            set_tile(i + PLAYFIELD_XL, j + PLAYFIELD_YT, 31);
        frame();
        frame();
    }
    for (j = 0; j < PLAYFIELD_H; j = j + 1) {
        for (i = 0; i < PLAYFIELD_W; i = i + 1)
            set_tile2(i + PLAYFIELD_XL, j + PLAYFIELD_YT, gameover_playfield[j * 10 + i] | 0x1100);
        frame();
        frame();
    }

    char blink = 0;
    char wait  = 1;
    char idx;
    while (wait) {
        // Short blink delay
        for (i = 0; i < 20; i = i + 1) {
            frame();

            // Quit game on CTRL-C (or ESCAPE)
            if (kb_pressed(KEY_C) && kb_pressed(KEY_CTRL)) {
                quit = 1;
                wait = 0;
            }

            // Start a new game when one of the game keys is pressed
            char keys = getkeys();
            if (~prev_keys & keys)
                wait = 0;
            prev_keys = keys;
        }

        if (blink)
            idx = 0x4F;
        else
            idx = 0x01;
        set_tile2(7 + PLAYFIELD_XL, 17 + PLAYFIELD_YT, idx);
        blink = !blink;
    }
}

init() {
    int i;
    int j;

    // Enable turbo mode
    IO_SYSCTRL = 4;

    // Map video RAM to 0xC000
    IO_BANK3 = 20;

    // Set tile data palette
    for (i = 0; i < 32; i = i + 1) {
        IO_VPALSEL  = 32 + i;
        IO_VPALDATA = tile_palette[i];
    }
    // Copy tile data into VRAM
    memcpy(vram_tiledata, tile_data, tile_data_end - tile_data);

    // Init video
    IO_VSCRX_L = 0;
    IO_VSCRX_H = 0;
    IO_VSCRY   = 0;

    // Disable all sprites
    for (i = 0; i < 64; i = i + 1) {
        IO_VSPRSEL  = i;
        IO_VSPRATTR = 0;
    }

    bgtiles_dst      = vram_tiledata + 32 * 46;
    bgtiles_src      = vram_tiledata + 32 * 48;
    bgtiles_src2     = bgtiles_src;
    tetromino_random = IO_VLINE % 7;

    // Draw background
    for (j = 0; j < 25; j = j + 1) {
        for (i = 0; i < 40; i = i + 1) {
            char idx;
            if ((i ^ j) & 1) {
                idx = 47;
            } else {
                idx = 46;
            }
            set_tile(i, j, idx);
        }
    }
}

main() {
    char iobank3_old = IO_BANK3;

    init();
    while (!quit)
        play_marathon();

    IO_BANK3 = iobank3_old;
    IO_VCTRL = VCTRL_TEXT_EN;
}

// clang-format off
#asm
    include "../tiledata.asm"
    include "/sdk/cb/lib/memcpy.asm"
    include "/sdk/cb/lib/itoa.asm"
#endasm
    // clang-format on
